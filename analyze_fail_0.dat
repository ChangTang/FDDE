# [No.1] construct_wrapper.855
# In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(244)/    def construct(self, x, shape=None):/
funcgraph fg_855(
        %para1 : Tensor(F32)[1, 3, 352, 352]    # x
        , %para2 : Tuple[I64*2]    # shape
        , %para3 : Ref[Tensor(F32)][1, 64, 1, 1]    # conv_edg.weight
        , %para4 : Ref[Tensor(F32)][128, 128, 3, 3]    # convf.0.weight
        , %para5 : Ref[Tensor(F32)][1, 128, 1, 1]    # convf.3.weight
        , %para6 : Ref[Tensor(F32)][64, 64, 3, 3]    # WW.conv12.0.weight
        , %para7 : Ref[Tensor(F32)][64, 64, 3, 3]    # WW.conv13.0.weight
        , %para8 : Ref[Tensor(F32)][64, 64, 3, 3]    # WW.conv14.0.weight
        , %para9 : Ref[Tensor(F32)][64, 64, 3, 3]    # NN.conv_l2.0.weight
        , %para10 : Ref[Tensor(F32)][64, 64, 3, 3]    # NN.conv_l3.0.weight
        , %para11 : Ref[Tensor(F32)][64, 64, 3, 3]    # NN.conv_l4.0.weight
        , %para12 : Ref[Tensor(F32)][64, 64, 3, 3]    # NN.conv_l5.0.weight
        , %para13 : Ref[Tensor(F32)][64, 64, 1, 1]    # conv1.0.weight
        , %para14 : Ref[Tensor(F32)][64, 64, 3, 3]    # conv1.1.weight
        , %para15 : Ref[Tensor(F32)][64, 256, 1, 1]    # conv2.0.weight
        , %para16 : Ref[Tensor(F32)][64, 64, 3, 3]    # conv2.1.weight
        , %para17 : Ref[Tensor(F32)][64, 512, 1, 1]    # conv3.0.weight
        , %para18 : Ref[Tensor(F32)][64, 64, 3, 3]    # conv3.1.weight
        , %para19 : Ref[Tensor(F32)][64, 1024, 1, 1]    # conv4.0.weight
        , %para20 : Ref[Tensor(F32)][64, 64, 3, 3]    # conv4.1.weight
        , %para21 : Ref[Tensor(F32)][64, 2048, 1, 1]    # conv5.0.weight
        , %para22 : Ref[Tensor(F32)][64, 64, 3, 3]    # conv5.1.weight
        , %para23 : Ref[Tensor(F32)][128]    # convf.1.gamma
        , %para24 : Ref[Tensor(F32)][128]    # convf.1.beta
        , %para25 : Ref[Tensor(F32)][128]    # convf.1.moving_mean
        , %para26 : Ref[Tensor(F32)][128]    # convf.1.moving_variance
        , %para27 : Ref[Tensor(F32)][64, 64, 3, 3]    # MM.conv5.0.weight
        , %para28 : Ref[Tensor(F32)][64, 64, 3, 3]    # MM.conv1.0.weight
        , %para29 : Ref[Tensor(F32)][64, 64, 3, 3]    # MM.conv4.0.weight
        , %para30 : Ref[Tensor(F32)][64, 3, 7, 7]    # bkbone.conv1.weight
        , %para31 : Ref[Tensor(F32)][64, 64, 3, 3]    # MM.conv2.0.weight
        , %para32 : Ref[Tensor(F32)][64, 64, 3, 3]    # MM.conv3.0.weight
        , %para33 : Ref[Tensor(F32)][64]    # WW.conv12.1.gamma
        , %para34 : Ref[Tensor(F32)][64]    # WW.conv12.1.beta
        , %para35 : Ref[Tensor(F32)][64]    # WW.conv12.1.moving_mean
        , %para36 : Ref[Tensor(F32)][64]    # WW.conv12.1.moving_variance
        , %para37 : Ref[Tensor(F32)][64]    # WW.conv13.1.gamma
        , %para38 : Ref[Tensor(F32)][64]    # WW.conv13.1.beta
        , %para39 : Ref[Tensor(F32)][64]    # WW.conv13.1.moving_mean
        , %para40 : Ref[Tensor(F32)][64]    # WW.conv13.1.moving_variance
        , %para41 : Ref[Tensor(F32)][64]    # WW.conv14.1.gamma
        , %para42 : Ref[Tensor(F32)][64]    # WW.conv14.1.beta
        , %para43 : Ref[Tensor(F32)][64]    # WW.conv14.1.moving_mean
        , %para44 : Ref[Tensor(F32)][64]    # WW.conv14.1.moving_variance
        , %para45 : Ref[Tensor(F32)][64]    # NN.conv_l2.1.gamma
        , %para46 : Ref[Tensor(F32)][64]    # NN.conv_l2.1.beta
        , %para47 : Ref[Tensor(F32)][64]    # NN.conv_l2.1.moving_mean
        , %para48 : Ref[Tensor(F32)][64]    # NN.conv_l2.1.moving_variance
        , %para49 : Ref[Tensor(F32)][64]    # NN.conv_l3.1.gamma
        , %para50 : Ref[Tensor(F32)][64]    # NN.conv_l3.1.beta
        , %para51 : Ref[Tensor(F32)][64]    # NN.conv_l3.1.moving_mean
        , %para52 : Ref[Tensor(F32)][64]    # NN.conv_l3.1.moving_variance
        , %para53 : Ref[Tensor(F32)][64]    # NN.conv_l4.1.gamma
        , %para54 : Ref[Tensor(F32)][64]    # NN.conv_l4.1.beta
        , %para55 : Ref[Tensor(F32)][64]    # NN.conv_l4.1.moving_mean
        , %para56 : Ref[Tensor(F32)][64]    # NN.conv_l4.1.moving_variance
        , %para57 : Ref[Tensor(F32)][64]    # NN.conv_l5.1.gamma
        , %para58 : Ref[Tensor(F32)][64]    # NN.conv_l5.1.beta
        , %para59 : Ref[Tensor(F32)][64]    # NN.conv_l5.1.moving_mean
        , %para60 : Ref[Tensor(F32)][64]    # NN.conv_l5.1.moving_variance
        , %para61 : Ref[Tensor(F32)][64]    # conv1.2.gamma
        , %para62 : Ref[Tensor(F32)][64]    # conv1.2.beta
        , %para63 : Ref[Tensor(F32)][64]    # conv1.2.moving_mean
        , %para64 : Ref[Tensor(F32)][64]    # conv1.2.moving_variance
        , %para65 : Ref[Tensor(F32)][64]    # conv2.2.gamma
        , %para66 : Ref[Tensor(F32)][64]    # conv2.2.beta
        , %para67 : Ref[Tensor(F32)][64]    # conv2.2.moving_mean
        , %para68 : Ref[Tensor(F32)][64]    # conv2.2.moving_variance
        , %para69 : Ref[Tensor(F32)][64]    # conv3.2.gamma
        , %para70 : Ref[Tensor(F32)][64]    # conv3.2.beta
        , %para71 : Ref[Tensor(F32)][64]    # conv3.2.moving_mean
        , %para72 : Ref[Tensor(F32)][64]    # conv3.2.moving_variance
        , %para73 : Ref[Tensor(F32)][64]    # conv4.2.gamma
        , %para74 : Ref[Tensor(F32)][64]    # conv4.2.beta
        , %para75 : Ref[Tensor(F32)][64]    # conv4.2.moving_mean
        , %para76 : Ref[Tensor(F32)][64]    # conv4.2.moving_variance
        , %para77 : Ref[Tensor(F32)][64]    # conv5.2.gamma
        , %para78 : Ref[Tensor(F32)][64]    # conv5.2.beta
        , %para79 : Ref[Tensor(F32)][64]    # conv5.2.moving_mean
        , %para80 : Ref[Tensor(F32)][64]    # conv5.2.moving_variance
        , %para81 : Ref[Tensor(F32)][64]    # MM.conv5.1.gamma
        , %para82 : Ref[Tensor(F32)][64]    # MM.conv5.1.beta
        , %para83 : Ref[Tensor(F32)][64]    # MM.conv5.1.moving_mean
        , %para84 : Ref[Tensor(F32)][64]    # MM.conv5.1.moving_variance
        , %para85 : Ref[Tensor(F32)][64]    # MM.conv1.1.gamma
        , %para86 : Ref[Tensor(F32)][64]    # MM.conv1.1.beta
        , %para87 : Ref[Tensor(F32)][64]    # MM.conv1.1.moving_mean
        , %para88 : Ref[Tensor(F32)][64]    # MM.conv1.1.moving_variance
        , %para89 : Ref[Tensor(F32)][64]    # MM.conv4.1.gamma
        , %para90 : Ref[Tensor(F32)][64]    # MM.conv4.1.beta
        , %para91 : Ref[Tensor(F32)][64]    # MM.conv4.1.moving_mean
        , %para92 : Ref[Tensor(F32)][64]    # MM.conv4.1.moving_variance
        , %para93 : Ref[Tensor(F32)][64]    # MM.conv2.1.gamma
        , %para94 : Ref[Tensor(F32)][64]    # MM.conv2.1.beta
        , %para95 : Ref[Tensor(F32)][64]    # MM.conv2.1.moving_mean
        , %para96 : Ref[Tensor(F32)][64]    # MM.conv2.1.moving_variance
        , %para97 : Ref[Tensor(F32)][64]    # MM.conv3.1.gamma
        , %para98 : Ref[Tensor(F32)][64]    # MM.conv3.1.beta
        , %para99 : Ref[Tensor(F32)][64]    # MM.conv3.1.moving_mean
        , %para100 : Ref[Tensor(F32)][64]    # MM.conv3.1.moving_variance
        , %para101 : Ref[Tensor(F32)][64]    # bkbone.bn1.gamma
        , %para102 : Ref[Tensor(F32)][64]    # bkbone.bn1.beta
        , %para103 : Ref[Tensor(F32)][64]    # bkbone.bn1.moving_mean
        , %para104 : Ref[Tensor(F32)][64]    # bkbone.bn1.moving_variance
        , %para105 : Ref[Tensor(F32)][64, 64, 3, 3]    # bkbone.layer1.0.conv2.weight
        , %para106 : Ref[Tensor(F32)][64, 64, 3, 3]    # bkbone.layer1.1.conv2.weight
        , %para107 : Ref[Tensor(F32)][64, 64, 3, 3]    # bkbone.layer1.2.conv2.weight
        , %para108 : Ref[Tensor(F32)][128, 128, 3, 3]    # bkbone.layer2.0.conv2.weight
        , %para109 : Ref[Tensor(F32)][128, 128, 3, 3]    # bkbone.layer2.1.conv2.weight
        , %para110 : Ref[Tensor(F32)][128, 128, 3, 3]    # bkbone.layer2.2.conv2.weight
        , %para111 : Ref[Tensor(F32)][128, 128, 3, 3]    # bkbone.layer2.3.conv2.weight
        , %para112 : Ref[Tensor(F32)][256, 256, 3, 3]    # bkbone.layer3.0.conv2.weight
        , %para113 : Ref[Tensor(F32)][256, 256, 3, 3]    # bkbone.layer3.1.conv2.weight
        , %para114 : Ref[Tensor(F32)][256, 256, 3, 3]    # bkbone.layer3.2.conv2.weight
        , %para115 : Ref[Tensor(F32)][256, 256, 3, 3]    # bkbone.layer3.3.conv2.weight
        , %para116 : Ref[Tensor(F32)][256, 256, 3, 3]    # bkbone.layer3.4.conv2.weight
        , %para117 : Ref[Tensor(F32)][256, 256, 3, 3]    # bkbone.layer3.5.conv2.weight
        , %para118 : Ref[Tensor(F32)][512, 512, 3, 3]    # bkbone.layer4.0.conv2.weight
        , %para119 : Ref[Tensor(F32)][512, 512, 3, 3]    # bkbone.layer4.1.conv2.weight
        , %para120 : Ref[Tensor(F32)][512, 512, 3, 3]    # bkbone.layer4.2.conv2.weight
        , %para121 : Ref[Tensor(F32)][64, 64, 1, 1]    # bkbone.layer1.0.conv1.weight
        , %para122 : Ref[Tensor(F32)][64, 256, 1, 1]    # bkbone.layer1.1.conv1.weight
        , %para123 : Ref[Tensor(F32)][64, 256, 1, 1]    # bkbone.layer1.2.conv1.weight
        , %para124 : Ref[Tensor(F32)][128, 256, 1, 1]    # bkbone.layer2.0.conv1.weight
        , %para125 : Ref[Tensor(F32)][128, 512, 1, 1]    # bkbone.layer2.1.conv1.weight
        , %para126 : Ref[Tensor(F32)][128, 512, 1, 1]    # bkbone.layer2.2.conv1.weight
        , %para127 : Ref[Tensor(F32)][128, 512, 1, 1]    # bkbone.layer2.3.conv1.weight
        , %para128 : Ref[Tensor(F32)][256, 512, 1, 1]    # bkbone.layer3.0.conv1.weight
        , %para129 : Ref[Tensor(F32)][256, 1024, 1, 1]    # bkbone.layer3.1.conv1.weight
        , %para130 : Ref[Tensor(F32)][256, 1024, 1, 1]    # bkbone.layer3.2.conv1.weight
        , %para131 : Ref[Tensor(F32)][256, 1024, 1, 1]    # bkbone.layer3.3.conv1.weight
        , %para132 : Ref[Tensor(F32)][256, 1024, 1, 1]    # bkbone.layer3.4.conv1.weight
        , %para133 : Ref[Tensor(F32)][256, 1024, 1, 1]    # bkbone.layer3.5.conv1.weight
        , %para134 : Ref[Tensor(F32)][512, 1024, 1, 1]    # bkbone.layer4.0.conv1.weight
        , %para135 : Ref[Tensor(F32)][512, 2048, 1, 1]    # bkbone.layer4.1.conv1.weight
        , %para136 : Ref[Tensor(F32)][512, 2048, 1, 1]    # bkbone.layer4.2.conv1.weight
        , %para137 : Ref[Tensor(F32)][64]    # bkbone.layer1.0.bn2.gamma
        , %para138 : Ref[Tensor(F32)][64]    # bkbone.layer1.0.bn2.beta
        , %para139 : Ref[Tensor(F32)][64]    # bkbone.layer1.0.bn2.moving_mean
        , %para140 : Ref[Tensor(F32)][64]    # bkbone.layer1.0.bn2.moving_variance
        , %para141 : Ref[Tensor(F32)][64]    # bkbone.layer1.1.bn2.gamma
        , %para142 : Ref[Tensor(F32)][64]    # bkbone.layer1.1.bn2.beta
        , %para143 : Ref[Tensor(F32)][64]    # bkbone.layer1.1.bn2.moving_mean
        , %para144 : Ref[Tensor(F32)][64]    # bkbone.layer1.1.bn2.moving_variance
        , %para145 : Ref[Tensor(F32)][64]    # bkbone.layer1.2.bn2.gamma
        , %para146 : Ref[Tensor(F32)][64]    # bkbone.layer1.2.bn2.beta
        , %para147 : Ref[Tensor(F32)][64]    # bkbone.layer1.2.bn2.moving_mean
        , %para148 : Ref[Tensor(F32)][64]    # bkbone.layer1.2.bn2.moving_variance
        , %para149 : Ref[Tensor(F32)][128]    # bkbone.layer2.0.bn2.gamma
        , %para150 : Ref[Tensor(F32)][128]    # bkbone.layer2.0.bn2.beta
        , %para151 : Ref[Tensor(F32)][128]    # bkbone.layer2.0.bn2.moving_mean
        , %para152 : Ref[Tensor(F32)][128]    # bkbone.layer2.0.bn2.moving_variance
        , %para153 : Ref[Tensor(F32)][128]    # bkbone.layer2.1.bn2.gamma
        , %para154 : Ref[Tensor(F32)][128]    # bkbone.layer2.1.bn2.beta
        , %para155 : Ref[Tensor(F32)][128]    # bkbone.layer2.1.bn2.moving_mean
        , %para156 : Ref[Tensor(F32)][128]    # bkbone.layer2.1.bn2.moving_variance
        , %para157 : Ref[Tensor(F32)][128]    # bkbone.layer2.2.bn2.gamma
        , %para158 : Ref[Tensor(F32)][128]    # bkbone.layer2.2.bn2.beta
        , %para159 : Ref[Tensor(F32)][128]    # bkbone.layer2.2.bn2.moving_mean
        , %para160 : Ref[Tensor(F32)][128]    # bkbone.layer2.2.bn2.moving_variance
        , %para161 : Ref[Tensor(F32)][128]    # bkbone.layer2.3.bn2.gamma
        , %para162 : Ref[Tensor(F32)][128]    # bkbone.layer2.3.bn2.beta
        , %para163 : Ref[Tensor(F32)][128]    # bkbone.layer2.3.bn2.moving_mean
        , %para164 : Ref[Tensor(F32)][128]    # bkbone.layer2.3.bn2.moving_variance
        , %para165 : Ref[Tensor(F32)][256]    # bkbone.layer3.0.bn2.gamma
        , %para166 : Ref[Tensor(F32)][256]    # bkbone.layer3.0.bn2.beta
        , %para167 : Ref[Tensor(F32)][256]    # bkbone.layer3.0.bn2.moving_mean
        , %para168 : Ref[Tensor(F32)][256]    # bkbone.layer3.0.bn2.moving_variance
        , %para169 : Ref[Tensor(F32)][256]    # bkbone.layer3.1.bn2.gamma
        , %para170 : Ref[Tensor(F32)][256]    # bkbone.layer3.1.bn2.beta
        , %para171 : Ref[Tensor(F32)][256]    # bkbone.layer3.1.bn2.moving_mean
        , %para172 : Ref[Tensor(F32)][256]    # bkbone.layer3.1.bn2.moving_variance
        , %para173 : Ref[Tensor(F32)][256]    # bkbone.layer3.2.bn2.gamma
        , %para174 : Ref[Tensor(F32)][256]    # bkbone.layer3.2.bn2.beta
        , %para175 : Ref[Tensor(F32)][256]    # bkbone.layer3.2.bn2.moving_mean
        , %para176 : Ref[Tensor(F32)][256]    # bkbone.layer3.2.bn2.moving_variance
        , %para177 : Ref[Tensor(F32)][256]    # bkbone.layer3.3.bn2.gamma
        , %para178 : Ref[Tensor(F32)][256]    # bkbone.layer3.3.bn2.beta
        , %para179 : Ref[Tensor(F32)][256]    # bkbone.layer3.3.bn2.moving_mean
        , %para180 : Ref[Tensor(F32)][256]    # bkbone.layer3.3.bn2.moving_variance
        , %para181 : Ref[Tensor(F32)][256]    # bkbone.layer3.4.bn2.gamma
        , %para182 : Ref[Tensor(F32)][256]    # bkbone.layer3.4.bn2.beta
        , %para183 : Ref[Tensor(F32)][256]    # bkbone.layer3.4.bn2.moving_mean
        , %para184 : Ref[Tensor(F32)][256]    # bkbone.layer3.4.bn2.moving_variance
        , %para185 : Ref[Tensor(F32)][256]    # bkbone.layer3.5.bn2.gamma
        , %para186 : Ref[Tensor(F32)][256]    # bkbone.layer3.5.bn2.beta
        , %para187 : Ref[Tensor(F32)][256]    # bkbone.layer3.5.bn2.moving_mean
        , %para188 : Ref[Tensor(F32)][256]    # bkbone.layer3.5.bn2.moving_variance
        , %para189 : Ref[Tensor(F32)][512]    # bkbone.layer4.0.bn2.gamma
        , %para190 : Ref[Tensor(F32)][512]    # bkbone.layer4.0.bn2.beta
        , %para191 : Ref[Tensor(F32)][512]    # bkbone.layer4.0.bn2.moving_mean
        , %para192 : Ref[Tensor(F32)][512]    # bkbone.layer4.0.bn2.moving_variance
        , %para193 : Ref[Tensor(F32)][512]    # bkbone.layer4.1.bn2.gamma
        , %para194 : Ref[Tensor(F32)][512]    # bkbone.layer4.1.bn2.beta
        , %para195 : Ref[Tensor(F32)][512]    # bkbone.layer4.1.bn2.moving_mean
        , %para196 : Ref[Tensor(F32)][512]    # bkbone.layer4.1.bn2.moving_variance
        , %para197 : Ref[Tensor(F32)][512]    # bkbone.layer4.2.bn2.gamma
        , %para198 : Ref[Tensor(F32)][512]    # bkbone.layer4.2.bn2.beta
        , %para199 : Ref[Tensor(F32)][512]    # bkbone.layer4.2.bn2.moving_mean
        , %para200 : Ref[Tensor(F32)][512]    # bkbone.layer4.2.bn2.moving_variance
        , %para201 : Ref[Tensor(F32)][256, 64, 1, 1]    # bkbone.layer1.0.conv3.weight
        , %para202 : Ref[Tensor(F32)][64]    # bkbone.layer1.0.bn1.gamma
        , %para203 : Ref[Tensor(F32)][64]    # bkbone.layer1.0.bn1.beta
        , %para204 : Ref[Tensor(F32)][64]    # bkbone.layer1.0.bn1.moving_mean
        , %para205 : Ref[Tensor(F32)][64]    # bkbone.layer1.0.bn1.moving_variance
        , %para206 : Ref[Tensor(F32)][256, 64, 1, 1]    # bkbone.layer1.1.conv3.weight
        , %para207 : Ref[Tensor(F32)][64]    # bkbone.layer1.1.bn1.gamma
        , %para208 : Ref[Tensor(F32)][64]    # bkbone.layer1.1.bn1.beta
        , %para209 : Ref[Tensor(F32)][64]    # bkbone.layer1.1.bn1.moving_mean
        , %para210 : Ref[Tensor(F32)][64]    # bkbone.layer1.1.bn1.moving_variance
        , %para211 : Ref[Tensor(F32)][256, 64, 1, 1]    # bkbone.layer1.2.conv3.weight
        , %para212 : Ref[Tensor(F32)][64]    # bkbone.layer1.2.bn1.gamma
        , %para213 : Ref[Tensor(F32)][64]    # bkbone.layer1.2.bn1.beta
        , %para214 : Ref[Tensor(F32)][64]    # bkbone.layer1.2.bn1.moving_mean
        , %para215 : Ref[Tensor(F32)][64]    # bkbone.layer1.2.bn1.moving_variance
        , %para216 : Ref[Tensor(F32)][512, 128, 1, 1]    # bkbone.layer2.0.conv3.weight
        , %para217 : Ref[Tensor(F32)][128]    # bkbone.layer2.0.bn1.gamma
        , %para218 : Ref[Tensor(F32)][128]    # bkbone.layer2.0.bn1.beta
        , %para219 : Ref[Tensor(F32)][128]    # bkbone.layer2.0.bn1.moving_mean
        , %para220 : Ref[Tensor(F32)][128]    # bkbone.layer2.0.bn1.moving_variance
        , %para221 : Ref[Tensor(F32)][512, 128, 1, 1]    # bkbone.layer2.1.conv3.weight
        , %para222 : Ref[Tensor(F32)][128]    # bkbone.layer2.1.bn1.gamma
        , %para223 : Ref[Tensor(F32)][128]    # bkbone.layer2.1.bn1.beta
        , %para224 : Ref[Tensor(F32)][128]    # bkbone.layer2.1.bn1.moving_mean
        , %para225 : Ref[Tensor(F32)][128]    # bkbone.layer2.1.bn1.moving_variance
        , %para226 : Ref[Tensor(F32)][512, 128, 1, 1]    # bkbone.layer2.2.conv3.weight
        , %para227 : Ref[Tensor(F32)][128]    # bkbone.layer2.2.bn1.gamma
        , %para228 : Ref[Tensor(F32)][128]    # bkbone.layer2.2.bn1.beta
        , %para229 : Ref[Tensor(F32)][128]    # bkbone.layer2.2.bn1.moving_mean
        , %para230 : Ref[Tensor(F32)][128]    # bkbone.layer2.2.bn1.moving_variance
        , %para231 : Ref[Tensor(F32)][512, 128, 1, 1]    # bkbone.layer2.3.conv3.weight
        , %para232 : Ref[Tensor(F32)][128]    # bkbone.layer2.3.bn1.gamma
        , %para233 : Ref[Tensor(F32)][128]    # bkbone.layer2.3.bn1.beta
        , %para234 : Ref[Tensor(F32)][128]    # bkbone.layer2.3.bn1.moving_mean
        , %para235 : Ref[Tensor(F32)][128]    # bkbone.layer2.3.bn1.moving_variance
        , %para236 : Ref[Tensor(F32)][1024, 256, 1, 1]    # bkbone.layer3.0.conv3.weight
        , %para237 : Ref[Tensor(F32)][256]    # bkbone.layer3.0.bn1.gamma
        , %para238 : Ref[Tensor(F32)][256]    # bkbone.layer3.0.bn1.beta
        , %para239 : Ref[Tensor(F32)][256]    # bkbone.layer3.0.bn1.moving_mean
        , %para240 : Ref[Tensor(F32)][256]    # bkbone.layer3.0.bn1.moving_variance
        , %para241 : Ref[Tensor(F32)][1024, 256, 1, 1]    # bkbone.layer3.1.conv3.weight
        , %para242 : Ref[Tensor(F32)][256]    # bkbone.layer3.1.bn1.gamma
        , %para243 : Ref[Tensor(F32)][256]    # bkbone.layer3.1.bn1.beta
        , %para244 : Ref[Tensor(F32)][256]    # bkbone.layer3.1.bn1.moving_mean
        , %para245 : Ref[Tensor(F32)][256]    # bkbone.layer3.1.bn1.moving_variance
        , %para246 : Ref[Tensor(F32)][1024, 256, 1, 1]    # bkbone.layer3.2.conv3.weight
        , %para247 : Ref[Tensor(F32)][256]    # bkbone.layer3.2.bn1.gamma
        , %para248 : Ref[Tensor(F32)][256]    # bkbone.layer3.2.bn1.beta
        , %para249 : Ref[Tensor(F32)][256]    # bkbone.layer3.2.bn1.moving_mean
        , %para250 : Ref[Tensor(F32)][256]    # bkbone.layer3.2.bn1.moving_variance
        , %para251 : Ref[Tensor(F32)][1024, 256, 1, 1]    # bkbone.layer3.3.conv3.weight
        , %para252 : Ref[Tensor(F32)][256]    # bkbone.layer3.3.bn1.gamma
        , %para253 : Ref[Tensor(F32)][256]    # bkbone.layer3.3.bn1.beta
        , %para254 : Ref[Tensor(F32)][256]    # bkbone.layer3.3.bn1.moving_mean
        , %para255 : Ref[Tensor(F32)][256]    # bkbone.layer3.3.bn1.moving_variance
        , %para256 : Ref[Tensor(F32)][1024, 256, 1, 1]    # bkbone.layer3.4.conv3.weight
        , %para257 : Ref[Tensor(F32)][256]    # bkbone.layer3.4.bn1.gamma
        , %para258 : Ref[Tensor(F32)][256]    # bkbone.layer3.4.bn1.beta
        , %para259 : Ref[Tensor(F32)][256]    # bkbone.layer3.4.bn1.moving_mean
        , %para260 : Ref[Tensor(F32)][256]    # bkbone.layer3.4.bn1.moving_variance
        , %para261 : Ref[Tensor(F32)][1024, 256, 1, 1]    # bkbone.layer3.5.conv3.weight
        , %para262 : Ref[Tensor(F32)][256]    # bkbone.layer3.5.bn1.gamma
        , %para263 : Ref[Tensor(F32)][256]    # bkbone.layer3.5.bn1.beta
        , %para264 : Ref[Tensor(F32)][256]    # bkbone.layer3.5.bn1.moving_mean
        , %para265 : Ref[Tensor(F32)][256]    # bkbone.layer3.5.bn1.moving_variance
        , %para266 : Ref[Tensor(F32)][2048, 512, 1, 1]    # bkbone.layer4.0.conv3.weight
        , %para267 : Ref[Tensor(F32)][512]    # bkbone.layer4.0.bn1.gamma
        , %para268 : Ref[Tensor(F32)][512]    # bkbone.layer4.0.bn1.beta
        , %para269 : Ref[Tensor(F32)][512]    # bkbone.layer4.0.bn1.moving_mean
        , %para270 : Ref[Tensor(F32)][512]    # bkbone.layer4.0.bn1.moving_variance
        , %para271 : Ref[Tensor(F32)][2048, 512, 1, 1]    # bkbone.layer4.1.conv3.weight
        , %para272 : Ref[Tensor(F32)][512]    # bkbone.layer4.1.bn1.gamma
        , %para273 : Ref[Tensor(F32)][512]    # bkbone.layer4.1.bn1.beta
        , %para274 : Ref[Tensor(F32)][512]    # bkbone.layer4.1.bn1.moving_mean
        , %para275 : Ref[Tensor(F32)][512]    # bkbone.layer4.1.bn1.moving_variance
        , %para276 : Ref[Tensor(F32)][2048, 512, 1, 1]    # bkbone.layer4.2.conv3.weight
        , %para277 : Ref[Tensor(F32)][512]    # bkbone.layer4.2.bn1.gamma
        , %para278 : Ref[Tensor(F32)][512]    # bkbone.layer4.2.bn1.beta
        , %para279 : Ref[Tensor(F32)][512]    # bkbone.layer4.2.bn1.moving_mean
        , %para280 : Ref[Tensor(F32)][512]    # bkbone.layer4.2.bn1.moving_variance
        , %para281 : Ref[Tensor(F32)][256]    # bkbone.layer1.0.bn3.gamma
        , %para282 : Ref[Tensor(F32)][256]    # bkbone.layer1.0.bn3.beta
        , %para283 : Ref[Tensor(F32)][256]    # bkbone.layer1.0.bn3.moving_mean
        , %para284 : Ref[Tensor(F32)][256]    # bkbone.layer1.0.bn3.moving_variance
        , %para285 : Ref[Tensor(F32)][256]    # bkbone.layer1.1.bn3.gamma
        , %para286 : Ref[Tensor(F32)][256]    # bkbone.layer1.1.bn3.beta
        , %para287 : Ref[Tensor(F32)][256]    # bkbone.layer1.1.bn3.moving_mean
        , %para288 : Ref[Tensor(F32)][256]    # bkbone.layer1.1.bn3.moving_variance
        , %para289 : Ref[Tensor(F32)][256]    # bkbone.layer1.2.bn3.gamma
        , %para290 : Ref[Tensor(F32)][256]    # bkbone.layer1.2.bn3.beta
        , %para291 : Ref[Tensor(F32)][256]    # bkbone.layer1.2.bn3.moving_mean
        , %para292 : Ref[Tensor(F32)][256]    # bkbone.layer1.2.bn3.moving_variance
        , %para293 : Ref[Tensor(F32)][512]    # bkbone.layer2.0.bn3.gamma
        , %para294 : Ref[Tensor(F32)][512]    # bkbone.layer2.0.bn3.beta
        , %para295 : Ref[Tensor(F32)][512]    # bkbone.layer2.0.bn3.moving_mean
        , %para296 : Ref[Tensor(F32)][512]    # bkbone.layer2.0.bn3.moving_variance
        , %para297 : Ref[Tensor(F32)][512]    # bkbone.layer2.1.bn3.gamma
        , %para298 : Ref[Tensor(F32)][512]    # bkbone.layer2.1.bn3.beta
        , %para299 : Ref[Tensor(F32)][512]    # bkbone.layer2.1.bn3.moving_mean
        , %para300 : Ref[Tensor(F32)][512]    # bkbone.layer2.1.bn3.moving_variance
        , %para301 : Ref[Tensor(F32)][512]    # bkbone.layer2.2.bn3.gamma
        , %para302 : Ref[Tensor(F32)][512]    # bkbone.layer2.2.bn3.beta
        , %para303 : Ref[Tensor(F32)][512]    # bkbone.layer2.2.bn3.moving_mean
        , %para304 : Ref[Tensor(F32)][512]    # bkbone.layer2.2.bn3.moving_variance
        , %para305 : Ref[Tensor(F32)][512]    # bkbone.layer2.3.bn3.gamma
        , %para306 : Ref[Tensor(F32)][512]    # bkbone.layer2.3.bn3.beta
        , %para307 : Ref[Tensor(F32)][512]    # bkbone.layer2.3.bn3.moving_mean
        , %para308 : Ref[Tensor(F32)][512]    # bkbone.layer2.3.bn3.moving_variance
        , %para309 : Ref[Tensor(F32)][1024]    # bkbone.layer3.0.bn3.gamma
        , %para310 : Ref[Tensor(F32)][1024]    # bkbone.layer3.0.bn3.beta
        , %para311 : Ref[Tensor(F32)][1024]    # bkbone.layer3.0.bn3.moving_mean
        , %para312 : Ref[Tensor(F32)][1024]    # bkbone.layer3.0.bn3.moving_variance
        , %para313 : Ref[Tensor(F32)][1024]    # bkbone.layer3.1.bn3.gamma
        , %para314 : Ref[Tensor(F32)][1024]    # bkbone.layer3.1.bn3.beta
        , %para315 : Ref[Tensor(F32)][1024]    # bkbone.layer3.1.bn3.moving_mean
        , %para316 : Ref[Tensor(F32)][1024]    # bkbone.layer3.1.bn3.moving_variance
        , %para317 : Ref[Tensor(F32)][1024]    # bkbone.layer3.2.bn3.gamma
        , %para318 : Ref[Tensor(F32)][1024]    # bkbone.layer3.2.bn3.beta
        , %para319 : Ref[Tensor(F32)][1024]    # bkbone.layer3.2.bn3.moving_mean
        , %para320 : Ref[Tensor(F32)][1024]    # bkbone.layer3.2.bn3.moving_variance
        , %para321 : Ref[Tensor(F32)][1024]    # bkbone.layer3.3.bn3.gamma
        , %para322 : Ref[Tensor(F32)][1024]    # bkbone.layer3.3.bn3.beta
        , %para323 : Ref[Tensor(F32)][1024]    # bkbone.layer3.3.bn3.moving_mean
        , %para324 : Ref[Tensor(F32)][1024]    # bkbone.layer3.3.bn3.moving_variance
        , %para325 : Ref[Tensor(F32)][1024]    # bkbone.layer3.4.bn3.gamma
        , %para326 : Ref[Tensor(F32)][1024]    # bkbone.layer3.4.bn3.beta
        , %para327 : Ref[Tensor(F32)][1024]    # bkbone.layer3.4.bn3.moving_mean
        , %para328 : Ref[Tensor(F32)][1024]    # bkbone.layer3.4.bn3.moving_variance
        , %para329 : Ref[Tensor(F32)][1024]    # bkbone.layer3.5.bn3.gamma
        , %para330 : Ref[Tensor(F32)][1024]    # bkbone.layer3.5.bn3.beta
        , %para331 : Ref[Tensor(F32)][1024]    # bkbone.layer3.5.bn3.moving_mean
        , %para332 : Ref[Tensor(F32)][1024]    # bkbone.layer3.5.bn3.moving_variance
        , %para333 : Ref[Tensor(F32)][2048]    # bkbone.layer4.0.bn3.gamma
        , %para334 : Ref[Tensor(F32)][2048]    # bkbone.layer4.0.bn3.beta
        , %para335 : Ref[Tensor(F32)][2048]    # bkbone.layer4.0.bn3.moving_mean
        , %para336 : Ref[Tensor(F32)][2048]    # bkbone.layer4.0.bn3.moving_variance
        , %para337 : Ref[Tensor(F32)][2048]    # bkbone.layer4.1.bn3.gamma
        , %para338 : Ref[Tensor(F32)][2048]    # bkbone.layer4.1.bn3.beta
        , %para339 : Ref[Tensor(F32)][2048]    # bkbone.layer4.1.bn3.moving_mean
        , %para340 : Ref[Tensor(F32)][2048]    # bkbone.layer4.1.bn3.moving_variance
        , %para341 : Ref[Tensor(F32)][2048]    # bkbone.layer4.2.bn3.gamma
        , %para342 : Ref[Tensor(F32)][2048]    # bkbone.layer4.2.bn3.beta
        , %para343 : Ref[Tensor(F32)][2048]    # bkbone.layer4.2.bn3.moving_mean
        , %para344 : Ref[Tensor(F32)][2048]    # bkbone.layer4.2.bn3.moving_variance
        , %para345 : Ref[Tensor(F32)][256, 64, 1, 1]    # bkbone.layer1.0.down_sample_layer.0.weight
        , %para346 : Ref[Tensor(F32)][512, 256, 1, 1]    # bkbone.layer2.0.down_sample_layer.0.weight
        , %para347 : Ref[Tensor(F32)][1024, 512, 1, 1]    # bkbone.layer3.0.down_sample_layer.0.weight
        , %para348 : Ref[Tensor(F32)][2048, 1024, 1, 1]    # bkbone.layer4.0.down_sample_layer.0.weight
        , %para349 : Ref[Tensor(F32)][256]    # bkbone.layer1.0.down_sample_layer.1.gamma
        , %para350 : Ref[Tensor(F32)][256]    # bkbone.layer1.0.down_sample_layer.1.beta
        , %para351 : Ref[Tensor(F32)][256]    # bkbone.layer1.0.down_sample_layer.1.moving_mean
        , %para352 : Ref[Tensor(F32)][256]    # bkbone.layer1.0.down_sample_layer.1.moving_variance
        , %para353 : Ref[Tensor(F32)][512]    # bkbone.layer2.0.down_sample_layer.1.gamma
        , %para354 : Ref[Tensor(F32)][512]    # bkbone.layer2.0.down_sample_layer.1.beta
        , %para355 : Ref[Tensor(F32)][512]    # bkbone.layer2.0.down_sample_layer.1.moving_mean
        , %para356 : Ref[Tensor(F32)][512]    # bkbone.layer2.0.down_sample_layer.1.moving_variance
        , %para357 : Ref[Tensor(F32)][1024]    # bkbone.layer3.0.down_sample_layer.1.gamma
        , %para358 : Ref[Tensor(F32)][1024]    # bkbone.layer3.0.down_sample_layer.1.beta
        , %para359 : Ref[Tensor(F32)][1024]    # bkbone.layer3.0.down_sample_layer.1.moving_mean
        , %para360 : Ref[Tensor(F32)][1024]    # bkbone.layer3.0.down_sample_layer.1.moving_variance
        , %para361 : Ref[Tensor(F32)][2048]    # bkbone.layer4.0.down_sample_layer.1.gamma
        , %para362 : Ref[Tensor(F32)][2048]    # bkbone.layer4.0.down_sample_layer.1.beta
        , %para363 : Ref[Tensor(F32)][2048]    # bkbone.layer4.0.down_sample_layer.1.moving_mean
        , %para364 : Ref[Tensor(F32)][2048]    # bkbone.layer4.0.down_sample_layer.1.moving_variance
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_865(%para1, %para2)    #(Tensor(F32)[1, 3, 352, 352], Tuple[I64*2])    # fg_865=construct.865 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(247)/        if shape is None:/#[CNode]866
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(247)/        if shape is None:/#[CNode]867
}
# order:
#   1: construct_wrapper.855:[CNode]866{[0]: ValueNode<FuncGraph> construct.865, [1]: x, [2]: shape}
#   2: construct_wrapper.855:[CNode]867{[0]: ValueNode<Primitive> Return, [1]: [CNode]866}


# [No.2] construct.856
# In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(244)/    def construct(self, x, shape=None):/
funcgraph fg_856[fg_855](
        %para365 : Tensor(F32)[1, 3, 352, 352]    # Φx
        , %para366 : Tuple[I64*2]    # shape
    ) {
    %1 : Bool = DoSignaturePrimitive::S-Prim-is_{prim_type=1}(%para366, None)    #(Tuple[I64*2], NoneType) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(247)/        if shape is None:/#[CNode]868
    %2 : Bool = FuncGraph::fg_869(%1)    #(Bool)    # fg_869=bool_.869 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(247)/        if shape is None:/#[CNode]868
    %3 : Func = Primitive::Switch{prim_type=1}(%2, FuncGraph::fg_870, FuncGraph::fg_857)    #(Bool, Func, Func)    # fg_870=✓construct.870, fg_857=✗construct.857 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(247)/        if shape is None:/#[CNode]871

#------------------------> 1
    %4 = %3() #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(247)/        if shape is None:/#[CNode]872
    Primitive::Return{prim_type=1}(%4)    #(Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(247)/        if shape is None:/#[CNode]873
}
# order:
#   1: construct.856:Φresize_bilinear{[0]: ValueNode<ClassType> class 'mindspore.nn.layer.basic.ResizeBilinear'}
#   2: construct.856:[CNode]874{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> axis}
#   3: construct.856:[CNode]875{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<Int64Imm> 1}
#   4: construct.856:[CNode]876{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]874, [2]: [CNode]875}
#   5: construct.856:Φconc{[0]: ValueNode<UnpackCall> unpack_call, [1]: ValueNode<ClassType> class 'mindspore.ops.operations.array_ops.Concat', [2]: [CNode]876}
#   6: construct.856:[CNode]868{[0]: ValueNode<DoSignaturePrimitive> S-Prim-is_, [1]: shape, [2]: ValueNode<None> None}
#   7: construct.856:[CNode]868{[0]: ValueNode<FuncGraph> bool_.869, [1]: [CNode]868}
#   8: construct.856:[CNode]871{[0]: ValueNode<Primitive> Switch, [1]: [CNode]868, [2]: ValueNode<FuncGraph> ✓construct.870, [3]: ValueNode<FuncGraph> ✗construct.857}
#   9: construct.856:[CNode]872{[0]: [CNode]871}
#  10: construct.856:[CNode]873{[0]: ValueNode<Primitive> Return, [1]: [CNode]872}


# [No.3] ✗construct.857
# In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(247)/        if shape is None:/
funcgraph fg_857[fg_856](
) {

#------------------------> 2
    %1 = FuncGraph::fg_858(%para366)    #(Tuple[I64*2])    # fg_858=↓construct.858 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(247)/        if shape is None:/#[CNode]877
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(247)/        if shape is None:/#[CNode]878
}
# order:
#   1: ✗construct.857:[CNode]877{[0]: ValueNode<FuncGraph> ↓construct.858, [1]: shape}
#   2: ✗construct.857:[CNode]878{[0]: ValueNode<Primitive> Return, [1]: [CNode]877}


# [No.4] ↓construct.858
# In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(247)/        if shape is None:/
funcgraph fg_858[fg_856](
        %para367 : Tuple[I64*2]    # Φshape
    ) {
    %1 : Tuple[String*2] = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}("edg", "input")    #(String, String) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(255)/        (out12,out13, out14) = self.WW(edg=out_l1, input=[out_l2, out_l3, out_l4])/#[CNode]879

#------------------------> 3
    %2 = FuncGraph::fg_859(%para365)    #(Tensor(F32)[1, 3, 352, 352])    # fg_859=construct.859 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(249)/        out1, out2, out3, out4, out5 = self.bkbone(x)/#[CNode]880
    %3 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%2, I64(0))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(249)/        out1, out2, out3, out4, out5 = self.bkbone(x)/#out1
    %4 = FuncGraph::fg_881(%3)    #(Undefined)    # fg_881=construct.881 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(250)/        out1, out2, out3, out4, out5 = self.conv1(out1),self.conv2(out2), self.conv3(out3), self.conv4(out4), self.conv5(out5)/#[CNode]882
    %5 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%2, I64(1))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(249)/        out1, out2, out3, out4, out5 = self.bkbone(x)/#out2
    %6 = FuncGraph::fg_883(%5)    #(Undefined)    # fg_883=construct.883 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(250)/        out1, out2, out3, out4, out5 = self.conv1(out1),self.conv2(out2), self.conv3(out3), self.conv4(out4), self.conv5(out5)/#[CNode]884
    %7 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%2, I64(2))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(249)/        out1, out2, out3, out4, out5 = self.bkbone(x)/#out3
    %8 = FuncGraph::fg_885(%7)    #(Undefined)    # fg_885=construct.885 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(250)/        out1, out2, out3, out4, out5 = self.conv1(out1),self.conv2(out2), self.conv3(out3), self.conv4(out4), self.conv5(out5)/#[CNode]886
    %9 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%2, I64(3))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(249)/        out1, out2, out3, out4, out5 = self.bkbone(x)/#out4
    %10 = FuncGraph::fg_887(%9)    #(Undefined)    # fg_887=construct.887 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(250)/        out1, out2, out3, out4, out5 = self.conv1(out1),self.conv2(out2), self.conv3(out3), self.conv4(out4), self.conv5(out5)/#[CNode]888
    %11 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%2, I64(4))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(249)/        out1, out2, out3, out4, out5 = self.bkbone(x)/#out5
    %12 = FuncGraph::fg_889(%11)    #(Undefined)    # fg_889=construct.889 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(250)/        out1, out2, out3, out4, out5 = self.conv1(out1),self.conv2(out2), self.conv3(out3), self.conv4(out4), self.conv5(out5)/#[CNode]890
    %13 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%4, %6, %8, %10, %12)    #(Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(250)/        out1, out2, out3, out4, out5 = self.conv1(out1),self.conv2(out2), self.conv3(out3), self.conv4(out4), self.conv5(out5)/#[CNode]891
    %14 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%13, I64(0))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(250)/        out1, out2, out3, out4, out5 = self.conv1(out1),self.conv2(out2), self.conv3(out3), self.conv4(out4), self.conv5(out5)/#out1
    %15 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%13, I64(4))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(250)/        out1, out2, out3, out4, out5 = self.conv1(out1),self.conv2(out2), self.conv3(out3), self.conv4(out4), self.conv5(out5)/#out5
    %16 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%13, I64(3))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(250)/        out1, out2, out3, out4, out5 = self.conv1(out1),self.conv2(out2), self.conv3(out3), self.conv4(out4), self.conv5(out5)/#out4
    %17 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%13, I64(2))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(250)/        out1, out2, out3, out4, out5 = self.conv1(out1),self.conv2(out2), self.conv3(out3), self.conv4(out4), self.conv5(out5)/#out3
    %18 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%13, I64(1))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(250)/        out1, out2, out3, out4, out5 = self.conv1(out1),self.conv2(out2), self.conv3(out3), self.conv4(out4), self.conv5(out5)/#out2
    %19 = DoSignaturePrimitive::S-Prim-make_list{prim_type=1}(%15, %16, %17, %18)    #(Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(252)/        (out_l2,out_l3, out_l4, out_l5) = self.NN([out5, out4, out3,out2])/#[CNode]892
    %20 = FuncGraph::fg_893(%19)    #(Undefined)    # fg_893=construct.893 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(252)/        (out_l2,out_l3, out_l4, out_l5) = self.NN([out5, out4, out3,out2])/#[CNode]894
    %21 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%20, I64(0))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(252)/        (out_l2,out_l3, out_l4, out_l5) = self.NN([out5, out4, out3,out2])/#out_l2
    %22 = FuncGraph::fg_895(%14, %21)    #(Undefined, Undefined)    # fg_895=construct.895 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(254)/        out_l1 = self.MM(out1, out_l2)/#out_l1
    %23 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%20, I64(1))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(252)/        (out_l2,out_l3, out_l4, out_l5) = self.NN([out5, out4, out3,out2])/#out_l3
    %24 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%20, I64(2))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(252)/        (out_l2,out_l3, out_l4, out_l5) = self.NN([out5, out4, out3,out2])/#out_l4
    %25 = DoSignaturePrimitive::S-Prim-make_list{prim_type=1}(%21, %23, %24)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(255)/        (out12,out13, out14) = self.WW(edg=out_l1, input=[out_l2, out_l3, out_l4])/#[CNode]896
    %26 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%22, %25)    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(255)/        (out12,out13, out14) = self.WW(edg=out_l1, input=[out_l2, out_l3, out_l4])/#[CNode]897
    %27 = DoSignaturePrimitive::S-Prim-make_dict{prim_type=1}(%1, %26)    #(Tuple[String*2], Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(255)/        (out12,out13, out14) = self.WW(edg=out_l1, input=[out_l2, out_l3, out_l4])/#[CNode]898
    %28 = UnpackCall::unpack_call(FuncGraph::fg_899, %27)    #(Undefined, Undefined)    # fg_899=construct.899 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(255)/        (out12,out13, out14) = self.WW(edg=out_l1, input=[out_l2, out_l3, out_l4])/#[CNode]900
    %29 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%28, I64(0))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(255)/        (out12,out13, out14) = self.WW(edg=out_l1, input=[out_l2, out_l3, out_l4])/#out12
    %30 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%28, I64(1))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(255)/        (out12,out13, out14) = self.WW(edg=out_l1, input=[out_l2, out_l3, out_l4])/#out13
    %31 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%20, I64(3))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(252)/        (out_l2,out_l3, out_l4, out_l5) = self.NN([out5, out4, out3,out2])/#out_l5
    %32 = Primitive::MakeTuple{prim_type=1}(%29, %30, %31)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(244)/    def construct(self, x, shape=None):/#[CNode]901
    %33 = Primitive::stop_gradient{prim_type=1}(%32)    #(Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(244)/    def construct(self, x, shape=None):/#[CNode]902
    %34 = $(↓construct.858):ClassType() #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(257)/        out14_5 = out14 + resize_bilinear(out5, size=out14.shape[2:],align_corners=True)/#Φresize_bilinear
    %35 = FuncGraph::fg_903(%22)    #(Undefined)    # fg_903=construct.903 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(261)/        edg = self.conv_edg(out_l1)/#edg
    %36 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%35)    #(Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(262)/        edg = resize_bilinear(edg, size=shape,align_corners=True)/#[CNode]904
    %37 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}("size", "align_corners")    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(262)/        edg = resize_bilinear(edg, size=shape,align_corners=True)/#[CNode]905
    %38 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%para367, Bool(1))    #(Tuple[I64*2], Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(262)/        edg = resize_bilinear(edg, size=shape,align_corners=True)/#[CNode]906
    %39 = DoSignaturePrimitive::S-Prim-make_dict{prim_type=1}(%37, %38)    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(262)/        edg = resize_bilinear(edg, size=shape,align_corners=True)/#[CNode]907
    %40 = UnpackCall::unpack_call(%34, %36, %39)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(262)/        edg = resize_bilinear(edg, size=shape,align_corners=True)/#edg
    %41 = $(↓construct.858):DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}("axis")    #(Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(246)/        conc = ops.Concat(axis = 1)/#[CNode]874
    %42 = $(↓construct.858):DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(I64(1))    #(Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(246)/        conc = ops.Concat(axis = 1)/#[CNode]875
    %43 = $(↓construct.858):DoSignaturePrimitive::S-Prim-make_dict{prim_type=1}(%41, %42)    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(246)/        conc = ops.Concat(axis = 1)/#[CNode]876
    %44 = $(↓construct.858):UnpackCall::unpack_call(ClassType, %43)    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(259)/        out = self.convf(conc((out_l1,out14_5)))/#Φconc
    %45 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%28, I64(2))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(255)/        (out12,out13, out14) = self.WW(edg=out_l1, input=[out_l2, out_l3, out_l4])/#out14
    %46 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%15)    #(Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(257)/        out14_5 = out14 + resize_bilinear(out5, size=out14.shape[2:],align_corners=True)/#[CNode]908
    %47 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}("size", "align_corners")    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(257)/        out14_5 = out14 + resize_bilinear(out5, size=out14.shape[2:],align_corners=True)/#[CNode]909
    %48 = Primitive::getattr{prim_type=1}(%45, "shape")    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(257)/        out14_5 = out14 + resize_bilinear(out5, size=out14.shape[2:],align_corners=True)/#[CNode]910
    %49 = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(I64(2), None, None)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(0)/#[CNode]911
    %50 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%48, %49)    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(257)/        out14_5 = out14 + resize_bilinear(out5, size=out14.shape[2:],align_corners=True)/#[CNode]912
    %51 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%50, Bool(1))    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(257)/        out14_5 = out14 + resize_bilinear(out5, size=out14.shape[2:],align_corners=True)/#[CNode]913
    %52 = DoSignaturePrimitive::S-Prim-make_dict{prim_type=1}(%47, %51)    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(257)/        out14_5 = out14 + resize_bilinear(out5, size=out14.shape[2:],align_corners=True)/#[CNode]914
    %53 = UnpackCall::unpack_call(%34, %46, %52)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(257)/        out14_5 = out14 + resize_bilinear(out5, size=out14.shape[2:],align_corners=True)/#[CNode]915
    %54 = DoSignaturePrimitive::S-Prim-add{prim_type=1}(%45, %53)    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(257)/        out14_5 = out14 + resize_bilinear(out5, size=out14.shape[2:],align_corners=True)/#out14_5
    %55 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%22, %54)    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(259)/        out = self.convf(conc((out_l1,out14_5)))/#[CNode]916
    %56 = %44(%55)    #(Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(259)/        out = self.convf(conc((out_l1,out14_5)))/#[CNode]917
    %57 = FuncGraph::fg_918(%56)    #(Undefined)    # fg_918=construct.918 #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(259)/        out = self.convf(conc((out_l1,out14_5)))/#out
    %58 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%57)    #(Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(263)/        out = resize_bilinear(out, size=shape,align_corners=True)/#[CNode]919
    %59 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}("size", "align_corners")    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(263)/        out = resize_bilinear(out, size=shape,align_corners=True)/#[CNode]920
    %60 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%para367, Bool(1))    #(Tuple[I64*2], Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(263)/        out = resize_bilinear(out, size=shape,align_corners=True)/#[CNode]921
    %61 = DoSignaturePrimitive::S-Prim-make_dict{prim_type=1}(%59, %60)    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(263)/        out = resize_bilinear(out, size=shape,align_corners=True)/#[CNode]922
    %62 = UnpackCall::unpack_call(%34, %58, %61)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(263)/        out = resize_bilinear(out, size=shape,align_corners=True)/#out
    %63 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%40, %62)    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(264)/        return edg, out/#[CNode]923
    %64 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%63, %33)    #(Undefined, Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(244)/    def construct(self, x, shape=None):/#[CNode]924
    Primitive::Return{prim_type=1}(%64)    #(Undefined) #scope: Default
      # In file /home/user/newdisk/SOD/FDDE/train-fine/net.py(244)/    def construct(self, x, shape=None):/#[CNode]925
}
# order:
#   1: ↓construct.858:[CNode]880{[0]: ValueNode<FuncGraph> construct.859, [1]: Φx}
#   2: ↓construct.858:out1{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]880, [2]: ValueNode<Int64Imm> 0}
#   3: ↓construct.858:out2{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]880, [2]: ValueNode<Int64Imm> 1}
#   4: ↓construct.858:out3{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]880, [2]: ValueNode<Int64Imm> 2}
#   5: ↓construct.858:out4{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]880, [2]: ValueNode<Int64Imm> 3}
#   6: ↓construct.858:out5{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]880, [2]: ValueNode<Int64Imm> 4}
#   7: ↓construct.858:[CNode]882{[0]: ValueNode<FuncGraph> construct.881, [1]: out1}
#   8: ↓construct.858:[CNode]884{[0]: ValueNode<FuncGraph> construct.883, [1]: out2}
#   9: ↓construct.858:[CNode]886{[0]: ValueNode<FuncGraph> construct.885, [1]: out3}
#  10: ↓construct.858:[CNode]888{[0]: ValueNode<FuncGraph> construct.887, [1]: out4}
#  11: ↓construct.858:[CNode]890{[0]: ValueNode<FuncGraph> construct.889, [1]: out5}
#  12: ↓construct.858:[CNode]891{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: [CNode]882, [2]: [CNode]884, [3]: [CNode]886, [4]: [CNode]888, [5]: [CNode]890}
#  13: ↓construct.858:out1{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]891, [2]: ValueNode<Int64Imm> 0}
#  14: ↓construct.858:out2{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]891, [2]: ValueNode<Int64Imm> 1}
#  15: ↓construct.858:out3{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]891, [2]: ValueNode<Int64Imm> 2}
#  16: ↓construct.858:out4{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]891, [2]: ValueNode<Int64Imm> 3}
#  17: ↓construct.858:out5{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]891, [2]: ValueNode<Int64Imm> 4}
#  18: ↓construct.858:[CNode]892{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_list, [1]: out5, [2]: out4, [3]: out3, [4]: out2}
#  19: ↓construct.858:[CNode]894{[0]: ValueNode<FuncGraph> construct.893, [1]: [CNode]892}
#  20: ↓construct.858:out_l2{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]894, [2]: ValueNode<Int64Imm> 0}
#  21: ↓construct.858:out_l3{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]894, [2]: ValueNode<Int64Imm> 1}
#  22: ↓construct.858:out_l4{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]894, [2]: ValueNode<Int64Imm> 2}
#  23: ↓construct.858:out_l5{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]894, [2]: ValueNode<Int64Imm> 3}
#  24: ↓construct.858:out_l1{[0]: ValueNode<FuncGraph> construct.895, [1]: out1, [2]: out_l2}
#  25: ↓construct.858:[CNode]896{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_list, [1]: out_l2, [2]: out_l3, [3]: out_l4}
#  26: ↓construct.858:[CNode]879{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> edg, [2]: ValueNode<StringImm> input}
#  27: ↓construct.858:[CNode]897{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: out_l1, [2]: [CNode]896}
#  28: ↓construct.858:[CNode]898{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]879, [2]: [CNode]897}
#  29: ↓construct.858:[CNode]900{[0]: ValueNode<UnpackCall> unpack_call, [1]: ValueNode<FuncGraph> construct.899, [2]: [CNode]898}
#  30: ↓construct.858:out12{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]900, [2]: ValueNode<Int64Imm> 0}
#  31: ↓construct.858:out13{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]900, [2]: ValueNode<Int64Imm> 1}
#  32: ↓construct.858:out14{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]900, [2]: ValueNode<Int64Imm> 2}
#  33: ↓construct.858:[CNode]908{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: out5}
#  34: ↓construct.858:[CNode]910{[0]: ValueNode<Primitive> getattr, [1]: out14, [2]: ValueNode<StringImm> shape}
#  35: ↓construct.858:[CNode]911{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<Int64Imm> 2, [2]: ValueNode<None> None, [3]: ValueNode<None> None}
#  36: ↓construct.858:[CNode]912{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]910, [2]: [CNode]911}
#  37: ↓construct.858:[CNode]909{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> size, [2]: ValueNode<StringImm> align_corners}
#  38: ↓construct.858:[CNode]913{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: [CNode]912, [2]: ValueNode<BoolImm> true}
#  39: ↓construct.858:[CNode]914{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]909, [2]: [CNode]913}
#  40: ↓construct.858:[CNode]915{[0]: ValueNode<UnpackCall> unpack_call, [1]: Φresize_bilinear, [2]: [CNode]908, [3]: [CNode]914}
#  41: ↓construct.858:out14_5{[0]: ValueNode<DoSignaturePrimitive> S-Prim-add, [1]: out14, [2]: [CNode]915}
#  42: ↓construct.858:[CNode]916{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: out_l1, [2]: out14_5}
#  43: ↓construct.858:[CNode]917{[0]: Φconc, [1]: [CNode]916}
#  44: ↓construct.858:out{[0]: ValueNode<FuncGraph> construct.918, [1]: [CNode]917}
#  45: ↓construct.858:edg{[0]: ValueNode<FuncGraph> construct.903, [1]: out_l1}
#  46: ↓construct.858:[CNode]904{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: edg}
#  47: ↓construct.858:[CNode]905{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> size, [2]: ValueNode<StringImm> align_corners}
#  48: ↓construct.858:[CNode]906{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: Φshape, [2]: ValueNode<BoolImm> true}
#  49: ↓construct.858:[CNode]907{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]905, [2]: [CNode]906}
#  50: ↓construct.858:edg{[0]: ValueNode<UnpackCall> unpack_call, [1]: Φresize_bilinear, [2]: [CNode]904, [3]: [CNode]907}
#  51: ↓construct.858:[CNode]919{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: out}
#  52: ↓construct.858:[CNode]920{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> size, [2]: ValueNode<StringImm> align_corners}
#  53: ↓construct.858:[CNode]921{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: Φshape, [2]: ValueNode<BoolImm> true}
#  54: ↓construct.858:[CNode]922{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]920, [2]: [CNode]921}
#  55: ↓construct.858:out{[0]: ValueNode<UnpackCall> unpack_call, [1]: Φresize_bilinear, [2]: [CNode]919, [3]: [CNode]922}
#  56: ↓construct.858:[CNode]923{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: edg, [2]: out}
#  57: ↓construct.858:[CNode]925{[0]: ValueNode<Primitive> Return, [1]: [CNode]924}


# [No.5] construct.859
# In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(406)/    def construct(self, x)://
funcgraph fg_859[fg_855](
        %para368 : Tensor(F32)[1, 3, 352, 352]    # x
    ) {
    %1 : Bool = FuncGraph::fg_869(Bool(0))    #(Bool)    # fg_869=bool_.869 #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(407)/        if self.use_se://#926
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_927, FuncGraph::fg_860)    #(Bool, Func, Func)    # fg_927=✓construct.927, fg_860=✗construct.860 #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(407)/        if self.use_se://#[CNode]928

#------------------------> 4
    %3 = %2() #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(407)/        if self.use_se://#[CNode]929
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(407)/        if self.use_se://#[CNode]930
}
# order:
#   1: construct.859:926{[0]: ValueNode<FuncGraph> bool_.869, [1]: ValueNode<BoolImm> false}
#   2: construct.859:[CNode]928{[0]: ValueNode<Primitive> Switch, [1]: 926, [2]: ValueNode<FuncGraph> ✓construct.927, [3]: ValueNode<FuncGraph> ✗construct.860}
#   3: construct.859:[CNode]929{[0]: [CNode]928}
#   4: construct.859:[CNode]930{[0]: ValueNode<Primitive> Return, [1]: [CNode]929}


# [No.6] ✗construct.860
# In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(407)/        if self.use_se://
funcgraph fg_860[fg_859](
) {
    %1 : Tensor(F32)[1, 64, 176, 176] = FuncGraph::fg_931(%para368)    #(Tensor(F32)[1, 3, 352, 352])    # fg_931=construct.931 #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(416)/            x = self.conv1(x)//#x

#------------------------> 5
    %2 = FuncGraph::fg_861(%1)    #(Tensor(F32)[1, 64, 176, 176])    # fg_861=↓construct.861 #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(407)/        if self.use_se://#[CNode]932
    Primitive::Return{prim_type=1}(%2)    #(Undefined) #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(407)/        if self.use_se://#[CNode]933
}
# order:
#   1: ✗construct.860:x{[0]: ValueNode<FuncGraph> construct.931, [1]: x}
#   2: ✗construct.860:[CNode]932{[0]: ValueNode<FuncGraph> ↓construct.861, [1]: x}
#   3: ✗construct.860:[CNode]933{[0]: ValueNode<Primitive> Return, [1]: [CNode]932}


# [No.7] ↓construct.861
# In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(407)/        if self.use_se://
funcgraph fg_861[fg_855](
        %para369 : Tensor(F32)[1, 64, 176, 176]    # Φx
    ) {
    %1 : Bool = FuncGraph::fg_869(Bool(0))    #(Bool)    # fg_869=bool_.869 #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(419)/        if self.res_base://#934
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_935, FuncGraph::fg_862)    #(Bool, Func, Func)    # fg_935=✓↓construct.935, fg_862=✗↓construct.862 #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(419)/        if self.res_base://#[CNode]936

#------------------------> 6
    %3 = %2() #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(419)/        if self.res_base://#[CNode]937
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(419)/        if self.res_base://#[CNode]938
}
# order:
#   1: ↓construct.861:x{[0]: ValueNode<FuncGraph> construct.863, [1]: Φx}
#   2: ↓construct.861:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-ReLU, [1]: x}
#   3: ↓construct.861:934{[0]: ValueNode<FuncGraph> bool_.869, [1]: ValueNode<BoolImm> false}
#   4: ↓construct.861:[CNode]936{[0]: ValueNode<Primitive> Switch, [1]: 934, [2]: ValueNode<FuncGraph> ✓↓construct.935, [3]: ValueNode<FuncGraph> ✗↓construct.862}
#   5: ↓construct.861:[CNode]937{[0]: [CNode]936}
#   6: ↓construct.861:[CNode]938{[0]: ValueNode<Primitive> Return, [1]: [CNode]937}


# [No.8] ✗↓construct.862
# In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(419)/        if self.res_base://
funcgraph fg_862[fg_861](
) {

#------------------------> 7
    %1 = $(✗↓construct.862):FuncGraph::fg_863(%para369)    #(Tensor(F32)[1, 64, 176, 176])    # fg_863=construct.863 #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(417)/        x = self.bn1(x)//#x
    %2 = $(✗↓construct.862):DoSignaturePrimitive::S-Prim-ReLU{prim_type=1}[input_names=["x"], output_names=["output"]](%1)    #(Undefined) #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(418)/        x = self.relu(x)//#x
    %3 = FuncGraph::fg_939(%2)    #(Undefined)    # fg_939=↓↓construct.939 #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(419)/        if self.res_base://#[CNode]940
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/bkbone-ResNet
      # In file /home/user/newdisk/SOD/FDDE/train-fine/resnet/resnet50.py(419)/        if self.res_base://#[CNode]941
}
# order:
#   1: ✗↓construct.862:[CNode]940{[0]: ValueNode<FuncGraph> ↓↓construct.939, [1]: x}
#   2: ✗↓construct.862:[CNode]941{[0]: ValueNode<Primitive> Return, [1]: [CNode]940}


# [No.9] construct.863
# In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(195)/    def construct(self, x):/
funcgraph fg_863[fg_855](
        %para370 : Tensor(F32)[1, 64, 176, 176]    # Φx
    ) {

#------------------------> 8
    %1 = FuncGraph::fg_864(%para370, %para101, %para102, %para103, %para104)    #(Tensor(F32)[1, 64, 176, 176], Ref[Tensor(F32)][64], Ref[Tensor(F32)][64], Ref[Tensor(F32)][64], Ref[Tensor(F32)][64])    # fg_864=L-construct.864 #scope: Default
      # #[CNode]942
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/bkbone-ResNet/bn1-BatchNorm2d
      # In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(195)/    def construct(self, x):/#[CNode]943
}
# order:
#   1: construct.863:[CNode]942{[0]: ValueNode<FuncGraph> L-construct.864, [1]: Φx, [2]: bkbone.bn1.gamma, [3]: bkbone.bn1.beta, [4]: bkbone.bn1.moving_mean, [5]: bkbone.bn1.moving_variance}
#   2: construct.863:[CNode]943{[0]: ValueNode<Primitive> Return, [1]: [CNode]942}


# [No.10] L-construct.864
# In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(195)/    def construct(self, x):/
funcgraph fg_864(
        %para371 : Tensor(F32)[1, 64, 176, 176]    # Φx
        , %para372 : Ref[Tensor(F32)][64]    # L-bkbone.bn1.gamma
        , %para373 : Ref[Tensor(F32)][64]    # L-bkbone.bn1.beta
        , %para374 : Ref[Tensor(F32)][64]    # L-bkbone.bn1.moving_mean
        , %para375 : Ref[Tensor(F32)][64]    # L-bkbone.bn1.moving_variance
    ) {
    %1 : Tuple[I64*4] = DoSignaturePrimitive::S-Prim-Shape{prim_type=1}(%para371)    #(Tensor(F32)[1, 64, 176, 176]) #scope: Default/bkbone-ResNet/bn1-BatchNorm2d
      # In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(196)/        _shape_check_bn(self.shape(x), self.input_dims)/#944

#------------------------> 9
    %2 = DoSignaturePrimitive::S-Prim-_shape_check_bn{prim_type=1}(%1, "2d")    #(Tuple[I64*4], String) #scope: Default/bkbone-ResNet/bn1-BatchNorm2d
      # In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(196)/        _shape_check_bn(self.shape(x), self.input_dims)/#945
    %3 = Primitive::stop_gradient{prim_type=1}(%2)    #(Undefined) #scope: Default/bkbone-ResNet/bn1-BatchNorm2d
      # In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(195)/    def construct(self, x):/#946
    %4 = DoSignaturePrimitive::S-Prim-is_{prim_type=1}(None, None)    #(Undefined, Undefined) #scope: Default/bkbone-ResNet/bn1-BatchNorm2d
      # In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(197)/        if self.use_batch_statistics is None:/#947
    %5 = FuncGraph::fg_948(%4)    #(Undefined)    # fg_948=L-bool_.948 #scope: Default/bkbone-ResNet/bn1-BatchNorm2d
      # In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(197)/        if self.use_batch_statistics is None:/#947
    %6 = Primitive::Switch{prim_type=1}(%5, FuncGraph::fg_949, FuncGraph::fg_950)    #(Undefined, Undefined, Undefined)    # fg_949=L-✓construct.949, fg_950=L-✗construct.950 #scope: Default/bkbone-ResNet/bn1-BatchNorm2d
      # In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(197)/        if self.use_batch_statistics is None:/#951
    %7 = %6() #scope: Default/bkbone-ResNet/bn1-BatchNorm2d
      # In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(197)/        if self.use_batch_statistics is None:/#952
    %8 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%7, %3)    #(Undefined, Undefined) #scope: Default/bkbone-ResNet/bn1-BatchNorm2d
      # In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(195)/    def construct(self, x):/#953
    Primitive::Return{prim_type=1}(%8)    #(Undefined) #scope: Default/bkbone-ResNet/bn1-BatchNorm2d
      # In file /home/user/anaconda3/envs/mindspore-test/lib/python3.7/site-packages/mindspore/nn/layer/normalization.py(195)/    def construct(self, x):/#[CNode]943
}
# order:
#   1: L-construct.864:944{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Shape, [1]: Φx}
#   2: L-construct.864:945{[0]: ValueNode<DoSignaturePrimitive> S-Prim-_shape_check_bn, [1]: 944, [2]: ValueNode<StringImm> 2d}
#   3: L-construct.864:947{[0]: ValueNode<DoSignaturePrimitive> S-Prim-is_, [1]: ValueNode<None> None, [2]: ValueNode<None> None}
#   4: L-construct.864:947{[0]: ValueNode<FuncGraph> L-bool_.948, [1]: 947}
#   5: L-construct.864:951{[0]: ValueNode<Primitive> Switch, [1]: 947, [2]: ValueNode<FuncGraph> L-✓construct.949, [3]: ValueNode<FuncGraph> L-✗construct.950}
#   6: L-construct.864:952{[0]: 951}
#   7: L-construct.864:[CNode]943{[0]: ValueNode<Primitive> Return, [1]: 953}


#===============================================================================
# num of function graphs in stack: 11
